(*
Abbreviations:
    Decl = Declaration
    Stmt = Statement   
    Id   = Identifier
    Expr = Expression
    Lit  = Literal
    Arg  = Argument
    Op   = Operator
    Var  = Variable
    Func = Function
*)
EntryPoint = {Decl};

Decl
    = EnumDecl
    | ImportDecl
    | StructDecl
    | FuncDecl
    ;

EnumDecl
    = DEF TypeId NEWLINE INDENT {Enum} DEDENT
    ;

ImportDecl
    = IMPORT StringLit NEWLINE
    ;

StructDecl
    = DEF TypeId NEWLINE INDENT {MemberDefinition} DEDENT   
    | DEF TypeId NEWLINE INDENT PASS NEWLINE DEDENT         
    | DEF TypeId '{' {GenericId} '}' NEWLINE INDENT {MemberIdTypeList} NEWLINE DEDENT 
    | DEF TypeId '{' {GenericId} '}' NEWLINE INDENT PASS NEWLINE DEDENT 
    ;

MemberDefinition 
    = MemberId TypeExpr 
    ;

FuncDecl
    = DEF NulliFuncDecl 
    | DEF MonoFuncDecl  
    | DEF BiFuncDecl    
    | DEF TriFuncDecl   
    ;

(* 0 Arg Func *)
NulliFuncDecl 
    = FuncId '->' TypeExpr Block 
    | FuncId Block 
    ;

(* 1 Arg Func *)
MonoFuncDecl 
    = Arg FuncId '->' TypeExpr Block 
    | Arg FuncId Block 
    ;

(* 2 Arg Func *)
BiFuncDecl
    = Arg FuncId Arg '->' TypeExpr Block 
    | Arg OpId Arg '->' TypeExpr Block
    ;

(* 3 or more Arg Func *)
TriFuncDecl
    = Arg FuncId '(' Arg {SubFuncId Arg}')' '->' TypeExpr Block
    ;

Block
    = NEWLINE INDENT {Stmt} DEDENT
    | NEWLINE INDENT JavascriptCodeSnippet NEWLINE DEDENT
    | NEWLINE INDENT PASS NEWLINE DEDENT
    ;

Stmt
    = AssignmentStmt
    | ReturnStmt   
    | FuncCall    NEWLINE
    | OpFuncCall  NEWLINE
    | IfStmt              
    | ForStmt
    | WhileStmt
    ;

ReturnStmt
    = RETURN MultilineExpr 
    ;

ForStmt
    = FOR VarId IN SinglelineExpr Block
    ;

WhileStmt
    = WHILE Test Block
    ;

IfStmt
    = IF Test Block [{ELIF Test Block}] [ELSE Block]
    ;

Test
    = SinglelineExpr                           
    | SinglelineExpr LogicOp Test        
    | NOT SinglelineExpr                   
    | NOT SinglelineExpr LogicOp Test
    ;

AssignmentStmt
    = LET VarDecl '=' MultilineExpr
    | VarId '=' MultilineExpr        
    ;

VarDecl 
    = VarId                          
    | VarId MUTABLE                  
    | VarId TypeExpr           
    | VarId TypeExpr MUTABLE   
    | '(' VarId ')'                  
    | '(' VarId TypeExpr ')'   
    ;

TypeExpr
    = AtomicTypeExpr '|' TypeExpr
    | AtomicTypeExpr '&' TypeExpr
    | AtomicTypeExpr 
    ;

AtomicTypeExpr
    = TypeId     
    | TypeId '?'
    | GenericAtom
    | GenericAtom '?'           
    | TypeId '{' {TypeExprList} '}'     
    | TypeId '{' {TypeExprList} '}' '?' 
    ;

MultilineExpr
    = Object
    | Dictionary
    | MultilineList
    | SinglelineExpr NEWLINE
    ;

SinglelineExpr
    = AtomicExpr
    | OpFuncCall
    ;

OpFuncCall
    = OpFuncCall OpId AtomicExpr 
    | AtomicExpr OpId AtomicExpr 
    ;

FuncCall
    = NulliFuncCall
    | MonoFuncCall
    | BiFuncCall
    | TriFuncCall
    ;

NulliFuncCall
    = FuncId 
    ;

MonoFuncCall
    = AtomicExpr FuncId
    ;

BiFuncCall
    = AtomicExpr FuncId '(' SinglelineExpr ')'  
    ;

TriFuncCall
    = AtomicExpr FuncId '(' SinglelineExpr VarId SinglelineExpr ')'  
    ;

AtomicExpr 
    = '(' SinglelineExpr ')' 
    | ObjectAccessExpr
    | SinglelineList
    | FuncCall 
    | BooleanLit
    | StringLit
    | NumberLit
    | EnumLit
    | VarId
    | 'nil'
    ;

ObjectAccessExpr
    = AtomicExpr MemberId 
    ;

Object
    = TypeId NEWLINE 
    | TypeId NEWLINE INDENT {ObjectKeyValue} DEDENT
    ;

ObjectKeyValue
    = MemberId '=' MultilineExpr
    ;

Dictionary
    = '{' '}'
    | NEWLINE INDENT {DictionaryKeyValue} DEDENT 
    ;

DictionaryKeyValue
    = StringLit '=' MultilineExpr
    ;

SinglelineList
    = '[' [Element [{',' Element}]] ']' 
    ;

MultilineList
    = NEWLINE INDENT MultilineElements DEDENT
    ;

MultilineElements
    = BULLET SinglelineExpr NEWLINE MultilineElements
    | BULLET SinglelineExpr NEWLINE 
    ;

BooleanLit
    = 'true'
    | 'false'
    ;
