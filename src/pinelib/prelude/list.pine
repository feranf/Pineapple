import "./math"
import "./core"

def (this List{T}) ++ (that List{T}) -> List{T}
    <javascript>
    return $this.concat($that);
    </javascript>

def (this List{T}).(that Number) -> T 
    <javascript>
    if($that < 0) {
        return $this[$this.length + $that]
    }
    return $this[$that]
    </javascript>

def (this List{T}).(start Number to end Number) -> T 
    <javascript>
    return $this.slice($start, $end + 1)
    </javascript>

def (this List{T}).length -> Number
    <javascript>
    return $this.length;
    </javascript>


def (this List{T}).append(that T) -> List{T}
    return this ++ [that]

def (this List{T}).prepend(that T) -> List{T}
    return [that] ++ this

def (this Integer).to(that Integer) -> List{Integer}
    let mutable result = List{Integer}
    let mutable i = this
    while i <= that
        result = result.append(i)
        i = i + 1
    return result

def (this List{T}).at(index Integer put value T) -> List{T}
    <javascript>
    $this[$index] = $value
    return $this
    </javascript>