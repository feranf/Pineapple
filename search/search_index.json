{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Pineapple Language Pineapple is a programming language designed for humans. Finally, your colleagues can understand what you wrote. Create beautiful and elegant API without hacking. Write clean code easily without frying your brain. No more object-orientated programming. Say good bye to debugging hell. What you see is what you get. Say Hello to Pineapple.","title":"The Pineapple Language"},{"location":"#the-pineapple-language","text":"Pineapple is a programming language designed for humans. Finally, your colleagues can understand what you wrote. Create beautiful and elegant API without hacking. Write clean code easily without frying your brain. No more object-orientated programming. Say good bye to debugging hell. What you see is what you get. Say Hello to Pineapple.","title":"The Pineapple Language"},{"location":"about/","text":"About Pineapple Pineapple is designed and implemented by Wong Jia Hau. Pineapple is inspired by Haskell, Smalltalk, Python and Javascript.","title":"About"},{"location":"about/#about-pineapple","text":"Pineapple is designed and implemented by Wong Jia Hau. Pineapple is inspired by Haskell, Smalltalk, Python and Javascript.","title":"About Pineapple"},{"location":"installation/","text":"Download Pineapple","title":"Download Pineapple"},{"location":"installation/#download-pineapple","text":"","title":"Download Pineapple"},{"location":"license/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS Copyright 2018 Wong Jia Hau Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"features/AdvanceFunctions/","text":"Advance functions Multiple dispatch (Polymorphism) Pineapple supports Multiple Dispatch, it means you can have different function with the same signature as long as they takes different types of parameters. Multiple dispatch allows you to use Polymorphism easily without hassle. For example: // first plus function def ( this Number ) + ( that Number ) -> Number pass // second plus function def ( this String ) + ( that String ) -> String pass // third plus function def ( this List { Number }) + ( that List { Number }) -> List { Number } pass // Example of usage 12 + 13 // will call the first plus function \"12\" + \"13\" // will call the second plus function [ 1 , 2 , 3 ] + [ 4 , 5 , 6 ] // will call the third plus function 12 + \"12\" // error Generic functions Javascript binding Since Pineapple is a function that compiles to Javascript, you can easily use Javascript functions within Pineapple. To create a function that call native JS function, you need to: - use the <javascript> tag - prepend dollar sign $ to parameters For example: // Example 1 def ( this Any ). show < javascript > console . log ( $this ) </ javascript > // Example 2 def ( this Number ) ^ ( that Number ) -> Number < javascript > Math . pow ( $this , $that ) </ javascript > Not only that, it is also possible to use Node's require to import 3 rd party modules. def (filename String).open -> String <javascript> const fs = require(\"fs\") return fs.readFileSync($filename); </javascript>","title":"Advance functions"},{"location":"features/AdvanceFunctions/#advance-functions","text":"","title":"Advance functions"},{"location":"features/AdvanceFunctions/#multiple-dispatch-polymorphism","text":"Pineapple supports Multiple Dispatch, it means you can have different function with the same signature as long as they takes different types of parameters. Multiple dispatch allows you to use Polymorphism easily without hassle. For example: // first plus function def ( this Number ) + ( that Number ) -> Number pass // second plus function def ( this String ) + ( that String ) -> String pass // third plus function def ( this List { Number }) + ( that List { Number }) -> List { Number } pass // Example of usage 12 + 13 // will call the first plus function \"12\" + \"13\" // will call the second plus function [ 1 , 2 , 3 ] + [ 4 , 5 , 6 ] // will call the third plus function 12 + \"12\" // error","title":"Multiple dispatch (Polymorphism)"},{"location":"features/AdvanceFunctions/#generic-functions","text":"","title":"Generic functions"},{"location":"features/AdvanceFunctions/#javascript-binding","text":"Since Pineapple is a function that compiles to Javascript, you can easily use Javascript functions within Pineapple. To create a function that call native JS function, you need to: - use the <javascript> tag - prepend dollar sign $ to parameters For example: // Example 1 def ( this Any ). show < javascript > console . log ( $this ) </ javascript > // Example 2 def ( this Number ) ^ ( that Number ) -> Number < javascript > Math . pow ( $this , $that ) </ javascript > Not only that, it is also possible to use Node's require to import 3 rd party modules. def (filename String).open -> String <javascript> const fs = require(\"fs\") return fs.readFileSync($filename); </javascript>","title":"Javascript binding"},{"location":"features/BasicFunctions/","text":"Functions All functions in Pineapple are postfix-oriented, meaning that the function names comes after parameter. In general, there are 5 kinds of functions: Name Meaning Nullifunc Function that don't take any parameters. Monofunc Function that only 1 parameters. Bifunc Function that only 2 parameters. Trifunc Function that only 3 parameters. Polyfunc Function that 4 or more parameters. Notes Before you continue reading, you should know the following rules: Function name are always started with a dot. There are no exceptions. For example: .show Not only that, . is also a valid function name! You cannot separate the parameters using comma. Every function definition must start with a def keyword. By convention, parameters names are usually this , that or the . Nullifunc (0 parameter) Nullifunc is a function that do not need any parameters, for example: // Here's how you define a nullifunc def . pi -> Number return 3.142 // Here's how you call a nullifunc let x = . pi -> Number means that the .pi function will return a Number type. Monofunc (1 parameter) Monofunc is a function that takes only 1 parameter. Note that the parameter must be at front. For example: // here's how you declare a monofunc def ( this Number ). square -> Number return this * this // here's how you call a monofunc let x = 99. square // you can chain it! let y = 2. square . square . square Notes: this is not a keyword, it is just a variable name! Bifunc (2 parameters) Bifunc is a function that takes 2 parameters. Since you cannot separate parameters with comma, the only way is to put the name in the middle. For example, // here's how you define a bifunc def ( this Number ). plus ( that Number ) -> Number return this + that // here's how you call a bifunc let x = 99. plus ( 99 ). plus ( 22 ) User-defined operators In Pineapple, Bifunc is a special type of function, because you can use symbols as the function name. For example, // Here's how you define a operator bifunc def ( this List { Number }) + ( that List { Number }) -> List { Number } pass // Here's how you call it let x = [ 1 , 2 , 3 ] + [ 4 , 5 , 6 ] Note that pass means that the implementation of the function is temporarily passed. You can think of it as throwing NotImplementedException . Trifunc (3 parameters) Trifunc is a function that takes 3 parameters. As mentioned before, you cannot separate parameters with comma. So, you should separate them with an identifier. For example, // Here's how you define a trifunc def ( this String ). replace ( old String with new String ) -> String pass // Here's how you call a trifunc let x = \"Hello world\" . replace ( \"world\" with \"baby\" ) Note that with is not a keyword, it is a sub-function-identifier , it means that you can use any word you like as long as it is a single alphabetical word without spaces! Just to make it clear, let see another trifunc example: // Defining a trifunc def ( this Socket ). send ( message String to portNumber Integer ) pass // Here's how you use it mySocket . send ( \"Hello world\" to 8080 ) In this case, to is the sub-function-identifier . Why? Pineapple enforces this rules so that every function can be understood better. Compare the following functions: // Javascript replace ( \"Hello\" , \"el\" , \"lo\" ) // Hmm, is it replacing \"el\" or \"lo\" ? // Pineapple \"Hello\" . replace ( \"el\" with \"lo\" ) // I am very sure it is replacing \"el\" with \"lo\"! There are at least 2 advantages with it: - First, you don't need to write too much documentation about your function, as the name already tells the meaning - Secondly, when others read your code, they can understand faster Polyfunc (4 or more parameters) Polyfunc is a function that takes 4 or more parameters. It is similar as Trifunc, but it needs 2 or more sub-function-identifier . For example, // Here's how you define a Polyfunc with 4 parameters def ( this String ). replace ( startIndex Int to endIndex Int with new String ) -> string pass // Here's how you call it let x = \"Hello world\" . replace ( 0 to 4 with \"Hi\" ) Tips Sometimes, your function might require a lot of parameters. In such case, defining functions like this would be dreadful. So, you should pack those parameters into a single structure. For example, def RequestParam :url String :method String :body String :schema String def (this Server).send(that RequestParam) pass Example of usage: let param = RequestParam : url = \"192.168.0.0/api/people\" : method = \"POST\" : body = '{\"name\": \"Johnny\", \"age\": 999}' : schema = \"FREE\" myServer . send ( param ) What's the difference of Pineapple function with named parameters? Look at the following example to understand the difference. # Python replace ( target = \"Hello world\" , old = \"lo\" , new = \"wo\" ) // Pineapple \"Hello world\" . replace ( \"lo\" with \"wo\" ) Obviously, the Pineapple's version is much more clearer than Python's version. Moreover, it is also shorter! Actually, the Pineapple's way of defining function is also known as mixfix function, and that's how it is different from named parameters .","title":"Functions"},{"location":"features/BasicFunctions/#functions","text":"All functions in Pineapple are postfix-oriented, meaning that the function names comes after parameter. In general, there are 5 kinds of functions: Name Meaning Nullifunc Function that don't take any parameters. Monofunc Function that only 1 parameters. Bifunc Function that only 2 parameters. Trifunc Function that only 3 parameters. Polyfunc Function that 4 or more parameters.","title":"Functions"},{"location":"features/BasicFunctions/#notes","text":"Before you continue reading, you should know the following rules: Function name are always started with a dot. There are no exceptions. For example: .show Not only that, . is also a valid function name! You cannot separate the parameters using comma. Every function definition must start with a def keyword. By convention, parameters names are usually this , that or the .","title":"Notes"},{"location":"features/BasicFunctions/#nullifunc-0-parameter","text":"Nullifunc is a function that do not need any parameters, for example: // Here's how you define a nullifunc def . pi -> Number return 3.142 // Here's how you call a nullifunc let x = . pi -> Number means that the .pi function will return a Number type.","title":"Nullifunc (0 parameter)"},{"location":"features/BasicFunctions/#monofunc-1-parameter","text":"Monofunc is a function that takes only 1 parameter. Note that the parameter must be at front. For example: // here's how you declare a monofunc def ( this Number ). square -> Number return this * this // here's how you call a monofunc let x = 99. square // you can chain it! let y = 2. square . square . square Notes: this is not a keyword, it is just a variable name!","title":"Monofunc (1 parameter)"},{"location":"features/BasicFunctions/#bifunc-2-parameters","text":"Bifunc is a function that takes 2 parameters. Since you cannot separate parameters with comma, the only way is to put the name in the middle. For example, // here's how you define a bifunc def ( this Number ). plus ( that Number ) -> Number return this + that // here's how you call a bifunc let x = 99. plus ( 99 ). plus ( 22 )","title":"Bifunc (2 parameters)"},{"location":"features/BasicFunctions/#user-defined-operators","text":"In Pineapple, Bifunc is a special type of function, because you can use symbols as the function name. For example, // Here's how you define a operator bifunc def ( this List { Number }) + ( that List { Number }) -> List { Number } pass // Here's how you call it let x = [ 1 , 2 , 3 ] + [ 4 , 5 , 6 ] Note that pass means that the implementation of the function is temporarily passed. You can think of it as throwing NotImplementedException .","title":"User-defined operators"},{"location":"features/BasicFunctions/#trifunc-3-parameters","text":"Trifunc is a function that takes 3 parameters. As mentioned before, you cannot separate parameters with comma. So, you should separate them with an identifier. For example, // Here's how you define a trifunc def ( this String ). replace ( old String with new String ) -> String pass // Here's how you call a trifunc let x = \"Hello world\" . replace ( \"world\" with \"baby\" ) Note that with is not a keyword, it is a sub-function-identifier , it means that you can use any word you like as long as it is a single alphabetical word without spaces! Just to make it clear, let see another trifunc example: // Defining a trifunc def ( this Socket ). send ( message String to portNumber Integer ) pass // Here's how you use it mySocket . send ( \"Hello world\" to 8080 ) In this case, to is the sub-function-identifier .","title":"Trifunc (3 parameters)"},{"location":"features/BasicFunctions/#why","text":"Pineapple enforces this rules so that every function can be understood better. Compare the following functions: // Javascript replace ( \"Hello\" , \"el\" , \"lo\" ) // Hmm, is it replacing \"el\" or \"lo\" ? // Pineapple \"Hello\" . replace ( \"el\" with \"lo\" ) // I am very sure it is replacing \"el\" with \"lo\"! There are at least 2 advantages with it: - First, you don't need to write too much documentation about your function, as the name already tells the meaning - Secondly, when others read your code, they can understand faster","title":"Why?"},{"location":"features/BasicFunctions/#polyfunc-4-or-more-parameters","text":"Polyfunc is a function that takes 4 or more parameters. It is similar as Trifunc, but it needs 2 or more sub-function-identifier . For example, // Here's how you define a Polyfunc with 4 parameters def ( this String ). replace ( startIndex Int to endIndex Int with new String ) -> string pass // Here's how you call it let x = \"Hello world\" . replace ( 0 to 4 with \"Hi\" )","title":"Polyfunc (4 or more parameters)"},{"location":"features/BasicFunctions/#tips","text":"Sometimes, your function might require a lot of parameters. In such case, defining functions like this would be dreadful. So, you should pack those parameters into a single structure. For example, def RequestParam :url String :method String :body String :schema String def (this Server).send(that RequestParam) pass Example of usage: let param = RequestParam : url = \"192.168.0.0/api/people\" : method = \"POST\" : body = '{\"name\": \"Johnny\", \"age\": 999}' : schema = \"FREE\" myServer . send ( param )","title":"Tips"},{"location":"features/BasicFunctions/#whats-the-difference-of-pineapple-function-with-named-parameters","text":"Look at the following example to understand the difference. # Python replace ( target = \"Hello world\" , old = \"lo\" , new = \"wo\" ) // Pineapple \"Hello world\" . replace ( \"lo\" with \"wo\" ) Obviously, the Pineapple's version is much more clearer than Python's version. Moreover, it is also shorter! Actually, the Pineapple's way of defining function is also known as mixfix function, and that's how it is different from named parameters .","title":"What's the difference of Pineapple function with named parameters?"},{"location":"features/BasicProgram/","text":"A Basic Pineapple Program Every Pineapple program is executed via the .main method. For example, def . main 'hello world' . show 'bye' . show Note that the indentation is necessary. Also, by default, Prelude library will be loaded.","title":"A Basic Pineapple Program"},{"location":"features/BasicProgram/#a-basic-pineapple-program","text":"Every Pineapple program is executed via the .main method. For example, def . main 'hello world' . show 'bye' . show Note that the indentation is necessary. Also, by default, Prelude library will be loaded.","title":"A Basic Pineapple Program"},{"location":"features/ControlFlowStatements/","text":"Control Flow Statements Basically, you can control the flow of your Pineapple code with any of the following: if , elif and else for loop while loop break , continue or return Note Every test expression must have type of Boolean. Tips .isCrazy and other similar construct are just functions . Test expression chaining Sometimes, a single test expression is not enough to express what you really wanted. In such situation, you can use the following logical operators: and or not For example: if he . isYoung and he . isNaughty \"He is a kid\" . show elif sky . isBlue or air . isFresh \"I am happy!\" . show elif not current . isLunchTime \"Continue working . . .\" . show Note not operator have higher precedence than or and and . For example, the following code: if not he.isFine and he.isEating Is same as: if ( not he . isFine ) and he . isEating ... For statements For statements is used to iterate over a list. For example: for x in [ 1 , 2 , 3 , 4 ] x . show While loop While loop is use to loop some code until certain condition is met. while not file . atEOF file . readline . show","title":"Control Flow Statements"},{"location":"features/ControlFlowStatements/#control-flow-statements","text":"Basically, you can control the flow of your Pineapple code with any of the following: if , elif and else for loop while loop break , continue or return Note Every test expression must have type of Boolean. Tips .isCrazy and other similar construct are just functions .","title":"Control Flow Statements"},{"location":"features/ControlFlowStatements/#test-expression-chaining","text":"Sometimes, a single test expression is not enough to express what you really wanted. In such situation, you can use the following logical operators: and or not For example: if he . isYoung and he . isNaughty \"He is a kid\" . show elif sky . isBlue or air . isFresh \"I am happy!\" . show elif not current . isLunchTime \"Continue working . . .\" . show Note not operator have higher precedence than or and and . For example, the following code: if not he.isFine and he.isEating Is same as: if ( not he . isFine ) and he . isEating ...","title":"Test expression chaining"},{"location":"features/ControlFlowStatements/#for-statements","text":"For statements is used to iterate over a list. For example: for x in [ 1 , 2 , 3 , 4 ] x . show","title":"For statements"},{"location":"features/ControlFlowStatements/#while-loop","text":"While loop is use to loop some code until certain condition is met. while not file . atEOF file . readline . show","title":"While loop"},{"location":"features/Generics/","text":"Generics Generic specialization","title":"Generics"},{"location":"features/Generics/#generics","text":"","title":"Generics"},{"location":"features/Generics/#generic-specialization","text":"","title":"Generic specialization"},{"location":"features/Modules/","text":"","title":"Modules"},{"location":"features/ProgramStructure/","text":"Structure of Pineapple program Basically, all Pineapple program are lists of definitions. The definitions are: Function definition Struct definition Import definition Constants definition Type aliases definition Trait declaration definition Trait implementation definition Enumeration definition For example: // function definition def . main \"Hello world\" . show // struct definition def People : name String : age Number // import definition import \"./myFunctions.pine\" // constants definition def pi = 3.142 // type aliases definition def Color = Tuple { Int , Int , Int } // trait declaration definition def Equatable { T } def ( this T ) == ( that T ) -> Bool def ( this T ) != ( that T ) -> Bool return not this == that // trait implementation definition def Equatable { Color } def ( this Color ) == ( that Color ) -> Bool return \\ this .( 0 ) == that .( 0 ) and \\ this .( 1 ) == that .( 1 ) and \\ this .( 2 ) == that .( 2 ) // enumeration definition def Color `red ` green `blue ` yellow","title":"Structure of Pineapple program"},{"location":"features/ProgramStructure/#structure-of-pineapple-program","text":"Basically, all Pineapple program are lists of definitions. The definitions are: Function definition Struct definition Import definition Constants definition Type aliases definition Trait declaration definition Trait implementation definition Enumeration definition For example: // function definition def . main \"Hello world\" . show // struct definition def People : name String : age Number // import definition import \"./myFunctions.pine\" // constants definition def pi = 3.142 // type aliases definition def Color = Tuple { Int , Int , Int } // trait declaration definition def Equatable { T } def ( this T ) == ( that T ) -> Bool def ( this T ) != ( that T ) -> Bool return not this == that // trait implementation definition def Equatable { Color } def ( this Color ) == ( that Color ) -> Bool return \\ this .( 0 ) == that .( 0 ) and \\ this .( 1 ) == that .( 1 ) and \\ this .( 2 ) == that .( 2 ) // enumeration definition def Color `red ` green `blue ` yellow","title":"Structure of Pineapple program"},{"location":"features/StandardLibrary/","text":"Standard Library","title":"Standard Library"},{"location":"features/StandardLibrary/#standard-library","text":"","title":"Standard Library"},{"location":"features/Struct/","text":"Struct Struct type is a collection of fields, it allows you to give more meaning to your data. In layman terms, you can imagine struct as mould. To create a structure in Pineapple, you have to use the def keyword. Moreover, you have to remember that every field name must starts with colon : . For example, def People : name String : salary Number People is the struct name, while :name and :salary is the field name. To create new data from your struct, you have to use the new keyword: let john = new People :name = \"John\" :salary = 999 Note that the indentation for each field is necessary. To access the field data: let x = john:name Recursive struct You can also create recursive struct which contain fields that points to itself. For example: def People :name String :friend People? And here:s how you create new data from it: let john = new People : name = \"Marry\" : friend = new People : name = \"Jane\" : friend = new People : name = \"Lee\" : friend = `nil Accessing data: let acquaintance = john : friend : friend Generic struct You can also create generic structure in Pineapple, this feature is important when you need to create custom data structures. Generic struct can help you to prevent some silly type error. For example: // here's how you declare a generic struct def Node { T } : current T : next Node { T } ? // here's how you use it def . main let x = new Node { Integer } : current = \"10\" // Error, should be Integer, not String : next = `nil","title":"Struct"},{"location":"features/Struct/#struct","text":"Struct type is a collection of fields, it allows you to give more meaning to your data. In layman terms, you can imagine struct as mould. To create a structure in Pineapple, you have to use the def keyword. Moreover, you have to remember that every field name must starts with colon : . For example, def People : name String : salary Number People is the struct name, while :name and :salary is the field name. To create new data from your struct, you have to use the new keyword: let john = new People :name = \"John\" :salary = 999 Note that the indentation for each field is necessary. To access the field data: let x = john:name","title":"Struct"},{"location":"features/Struct/#recursive-struct","text":"You can also create recursive struct which contain fields that points to itself. For example: def People :name String :friend People? And here:s how you create new data from it: let john = new People : name = \"Marry\" : friend = new People : name = \"Jane\" : friend = new People : name = \"Lee\" : friend = `nil Accessing data: let acquaintance = john : friend : friend","title":"Recursive struct"},{"location":"features/Struct/#generic-struct","text":"You can also create generic structure in Pineapple, this feature is important when you need to create custom data structures. Generic struct can help you to prevent some silly type error. For example: // here's how you declare a generic struct def Node { T } : current T : next Node { T } ? // here's how you use it def . main let x = new Node { Integer } : current = \"10\" // Error, should be Integer, not String : next = `nil","title":"Generic struct"},{"location":"features/Traits/","text":"","title":"Traits"},{"location":"features/Types/","text":"Built-in types Pineapple has special support for the following types: Dict (Dictionary) List (also known as array) Number String Boolean Nil (also known as null)","title":"Built-in types"},{"location":"features/Types/#built-in-types","text":"Pineapple has special support for the following types: Dict (Dictionary) List (also known as array) Number String Boolean Nil (also known as null)","title":"Built-in types"},{"location":"features/Variables/","text":"Variables To create a variable, you need to use the let keyword: let myVariable = \"Hello World!\" Type inference The type of each variables are resolved automatically by the Pineapple compiler, so you don't need to provide any type annotation. For example: let x = \"yo\" // x has type of String let y = 0 // y has type of Int let z = [ 1 , 2 , 3 ] // z has type of List{Int} Although unnessecary, it is also possible to annotate variables with type manually: let x String = \"yo\" Default immutability By default, all variables in Pineapple are immutable, it means that you cannot assign a new value to it after you declare it. let count = 0 count = 1 // Error If you wish to make a variable mutable (aka. change-able), you need to use the mutable keyword. let x mutable = 0 x = 1 // No error This feature is implemented on purpose to discourage programmers from mutating variables all the time. So, instead of creating one variables and change it all the time, you should create as many variables as you want ! Default non-nullablility By default, you cannot assign nil` to a mutable variable. \u0002wzxhzdk:5\u0003 If you want to assign nil` to a variable, you need to declare it explicitly by using Nullable types. let x Int? mutable = 0 x = `nil // No error Pass by value When you try to assign the value of one variable to another variable, the value is copied, instead of copying its reference. For example, let john = People 'name = \"John\" ' age = 99 let newJohn = john newJohn 'name = \"Johnny Bravo\" john' name . show // Still \"John\" This feature is to prevent programmer from facing crazy bugs caused by pass-by-reference. Optimization (implementing) Of course, pass-by-value is expensive, thus it might slows down the program performance. Fortunately, the Pineapple compiler will use pass-by-reference whenever possible. For example: let x = 10 let y = x // x's value is pass-by-reference since it is not used afterwards y . show Another example: let x = 10 let y = x // x's value is pass-by-value, since it is still in used after this line x . show y . show","title":"Variables"},{"location":"features/Variables/#variables","text":"To create a variable, you need to use the let keyword: let myVariable = \"Hello World!\"","title":"Variables"},{"location":"features/Variables/#type-inference","text":"The type of each variables are resolved automatically by the Pineapple compiler, so you don't need to provide any type annotation. For example: let x = \"yo\" // x has type of String let y = 0 // y has type of Int let z = [ 1 , 2 , 3 ] // z has type of List{Int} Although unnessecary, it is also possible to annotate variables with type manually: let x String = \"yo\"","title":"Type inference"},{"location":"features/Variables/#default-immutability","text":"By default, all variables in Pineapple are immutable, it means that you cannot assign a new value to it after you declare it. let count = 0 count = 1 // Error If you wish to make a variable mutable (aka. change-able), you need to use the mutable keyword. let x mutable = 0 x = 1 // No error This feature is implemented on purpose to discourage programmers from mutating variables all the time. So, instead of creating one variables and change it all the time, you should create as many variables as you want !","title":"Default immutability"},{"location":"features/Variables/#default-non-nullablility","text":"By default, you cannot assign nil` to a mutable variable. \u0002wzxhzdk:5\u0003 If you want to assign nil` to a variable, you need to declare it explicitly by using Nullable types. let x Int? mutable = 0 x = `nil // No error","title":"Default non-nullablility"},{"location":"features/Variables/#pass-by-value","text":"When you try to assign the value of one variable to another variable, the value is copied, instead of copying its reference. For example, let john = People 'name = \"John\" ' age = 99 let newJohn = john newJohn 'name = \"Johnny Bravo\" john' name . show // Still \"John\" This feature is to prevent programmer from facing crazy bugs caused by pass-by-reference.","title":"Pass by value"},{"location":"features/Variables/#optimization-implementing","text":"Of course, pass-by-value is expensive, thus it might slows down the program performance. Fortunately, the Pineapple compiler will use pass-by-reference whenever possible. For example: let x = 10 let y = x // x's value is pass-by-reference since it is not used afterwards y . show Another example: let x = 10 let y = x // x's value is pass-by-value, since it is still in used after this line x . show y . show","title":"Optimization (implementing)"}]}