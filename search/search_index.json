{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About Pineapple","title":"About"},{"location":"about/#about-pineapple","text":"","title":"About Pineapple"},{"location":"features/functions/","text":"Functions All functions in Pineapple are postfix-oriented, meaning that the function names comes after parameter. In general, there are 5 kinds of functions: Nullifunc, Monofunc, Bifunc, Trifunc and Polyfunc. Notes Before you continue reading, you should know the following rules: Function name are always started with a dot. There are no exceptions. For example, .show You cannot separate the parameters using comma. Every function definition must start with a def keyword. By convention, parameters names are usually this , that or the . Now, you can enjoy the following docs. Nullifunc (0 param) Nullifunc is a function that do not need any parameters, for example: // Here's how you define a nullifunc def .pi -> Number return 3.142 // Here's how you call a nullifunc let x = .pi Monofunc (1 param) Monofunc is a function that takes only 1 parameter. Note that the parameter must be at front. For example: // here's how you declare a monofunc def (this Number).square -> Number return this * this // here's how you call a monofunc let x = 99.square Notes: this is not a keyword, it is just a variable name! Bifunc (2 params) Bifunc is a function that takes 2 params. Since you cannot separate params with comma, the only way is to put the name in the middle. For example, // here's how you define a bifunc def (this Number).plus(that Number) -> Number return this + that","title":"Functions"},{"location":"features/functions/#functions","text":"All functions in Pineapple are postfix-oriented, meaning that the function names comes after parameter. In general, there are 5 kinds of functions: Nullifunc, Monofunc, Bifunc, Trifunc and Polyfunc.","title":"Functions"},{"location":"features/functions/#notes","text":"Before you continue reading, you should know the following rules: Function name are always started with a dot. There are no exceptions. For example, .show You cannot separate the parameters using comma. Every function definition must start with a def keyword. By convention, parameters names are usually this , that or the . Now, you can enjoy the following docs.","title":"Notes"},{"location":"features/functions/#nullifunc-0-param","text":"Nullifunc is a function that do not need any parameters, for example: // Here's how you define a nullifunc def .pi -> Number return 3.142 // Here's how you call a nullifunc let x = .pi","title":"Nullifunc (0 param)"},{"location":"features/functions/#monofunc-1-param","text":"Monofunc is a function that takes only 1 parameter. Note that the parameter must be at front. For example: // here's how you declare a monofunc def (this Number).square -> Number return this * this // here's how you call a monofunc let x = 99.square Notes: this is not a keyword, it is just a variable name!","title":"Monofunc (1 param)"},{"location":"features/functions/#bifunc-2-params","text":"Bifunc is a function that takes 2 params. Since you cannot separate params with comma, the only way is to put the name in the middle. For example, // here's how you define a bifunc def (this Number).plus(that Number) -> Number return this + that","title":"Bifunc (2 params)"}]}